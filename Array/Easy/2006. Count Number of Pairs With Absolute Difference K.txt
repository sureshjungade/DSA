class Solution {
    public int countKDifference(int[] nums, int k) {
        int count = 0;
        for(int i=0; i<nums.length-1; i++){

            for(int j=i+1; j<nums.length; j++){
                int diff = Math.abs(nums[i]-nums[j]);
                if(diff==k){
                    count++;
                }
            }
        }
        return count;
    }
}
T.C. O(N)2


optimized solution : 
Map<Integer,Integer> map = new HashMap<>();

        for(int i=0; i<nums.length; i++){

            if(map.containsKey(nums[i]-k)){
                count += map.get(nums[i]-k);
            }
            if(map.containsKey(nums[i]+k)){
                count += map.get(nums[i]+k);
            }
            map.put(nums[i], map.getOrDefault(nums[i],0)+1);
        }
        return count;

===================================
The line is referring to a solution that involves using a data structure called a HashMap to find pairs of numbers in an array 
(represented by the variable "nums") that have a specific difference (represented by the variable "k").

The solution checks whether the HashMap contains two specific elements: (1) the value of "nums[i] - k" and (2) the value of 
"nums[i] + k". Here, "nums[i]" represents the current element being considered in the loop iteration.

If either of these two elements is found in the HashMap, then it means that there is at least one other element in the array 
that differs from the current element by the value of "k". In other words, there is a pair of numbers in the array whose 
difference is equal to "k".

So, the solution is using the HashMap to efficiently check for pairs of numbers with a specific difference, rather than comparing 
every element in the array to every other element, which would be much less efficient.