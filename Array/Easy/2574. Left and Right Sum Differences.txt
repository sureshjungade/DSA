class Solution {
    public int[] leftRigthDifference(int[] nums) {
        int n = nums.length;

        int left[] = new int[n];
        int right[] = new int[n];
        int sum = 0;
        int j = 1;
        for(int i=0; i<n-1; i++){
            sum += nums[i];
            left[j++] = sum;
        }
        sum = 0;
        j = n-2;
        for(int i=n-1; i>0; i--){
            sum += nums[i];
            right[j--] = sum;
        }
    int ans[] = new int[n];
        for(int i=0; i<n; i++){
            ans[i] = Math.abs(left[i]-right[i]);
        }
        return ans;
    }
}

T.C. O(N) S.C. O(N)


=====================================================================
Optimized :

T.C. O(N) S.C. O(1)

class Solution {
    public int[] leftRigthDifference(int[] nums) {
        int n = nums.length;
        int right = 0;
        int left = 0;
        for(int i : nums){
            right += i;
        }
        for(int i=0; i<n; i++){
            int val = nums[i];
            right -= val;
            nums[i] = Math.abs(left-right);
            left += val;
        }        
        return nums;
    }
}