class Solution {
    public int sumOfUnique(int[] nums) {
        int sum = 0;
        int n = nums.length;

        for(int i=0; i<n-1; i++){
            int count = 0;
            for(int j=0; j<n; j++){
                if(nums[i]==nums[j]){
                    count++;
                }
            }
            if(count==1){
                System.out.println(count +" " + sum);
                sum += nums[i];
            }
            
        }
        int num = nums[n-1];
        int temp = 1;
        for(int i=n-2; i>=0; i--){
            if(num==nums[i]){
                temp++;
            }else{
                continue;
            }
        }
        System.out.println(num + " " + temp +" " + sum);
        if(temp==1){
            return sum+num;
        }else{
            return sum;
        }
        
    }
}



optimized solution using hashmap : 

class Solution {
    public int sumOfUnique(int[] nums) {
        int sum = 0;
        int n = nums.length;
        Map<Integer,Integer> map = new HashMap<>();
        for(int i=0; i<n; i++){
            map.put(nums[i],map.getOrDefault(nums[i],0)+1);
        }
        
        for(Integer i : map.keySet()){
            if(map.get(i)==1){
                sum += i;
            }
        }

        return sum;
    }
}