Using HashMap:TC = O(N) SC = O(N);

class Solution {
    public int[] numberOfPairs(int[] nums) {
        int ans[] = new int[2];

        Map<Integer,Integer> map = new HashMap<>();

        for(int i=0; i<nums.length; i++){
            map.put(nums[i],map.getOrDefault(nums[i],0)+1);
        }
        int even =0;
        int odd = 0;
        for(int i : map.keySet()){
            int temp = map.get(i);
            if(temp%2!=0){
                odd++;
               even += (temp-1)/2;
            }else{
                even += (temp)/2;
            }
        }
        ans[0] =even;
        ans[1] =odd;
        return ans;
    }
}


Using Divide and modulo:TC = O(N) SC = O(N);

class Solution {
    public int[] numberOfPairs(int[] nums) {
        int ans[] = new int[2];
        int cnt[] = new int[101];
        for(int i: nums){
             cnt[i]++;

         }
            int even =0;
            int odd = 0;
         for(int i: cnt){
             even += i/2;
             odd += i%2;
             
         }
         ans[0] =even;
         ans[1] =odd;
        return ans;
       
    }
}